///---///
let a: string = "hello";
let a = "hello";
///---///
TS의 typechecker가 타입을 추론해서 둘 다 되는데 후자를 추천 왜?
더 쉽고 코드도 짧아서 가독성이 좋음 추론하게 두자


///---///
let a: number[] = [];
///---///
배열 요소의 타입 정의

///---///
const player: {
    name: string,
    age?: number,
} = {
    name: "yoon",
}
///---///
object의 타입 정의 ?를 추가하면 optional type이 됨
즉 age는 number 혹은 undefined임

///---///
type Player = {
    name: string,
    age?: number
}
const yoon: Player = {
    name:"yoon"
}
///---///
Alias?
타입 생성(첫 글자는 대문자)
같은 요소를 갖는 여러 객체를 생성 시 편함

///---///
function playerMaker(name: string): Player{
    return {
        name
    }
};
const plyaerMaker = (name: string): Player => ({
    name
});
///---///
함수 인자와 return 타입 정의

///---///
type Player = {
    readonly name: String
    age?: Number
}
const numbers: readonly number[] = [1, 2];
///---///
readonly를 추가하면 값을 바꿀 수 없다 기타 array.push()등도 불가

///---///
const player: [string, number, boolean] = ["1", 1, true];
///---///
항상 정해진 개수의 요소를 가져야하는 array를 지정할 수 있다
또한 원하는 순서에 맞게 타입을 가져아 함(readonly와 합성 가능)

///---///
const a: any[] = ["1", 1, true];
///---///
type any를 사용 시 ts로부터 보호받을 수 없고 js가 됨(비추천)

///---///
let a: unknown;
if(typeof a === 'number'){
    let b = a + 1;
}
///---///
그냥은 연산이 안 됨
변수의 타입을 미리 알지 못할 때 사용

///---///
function hello(){
    console.log("*");
}
///---///
이처럼 함수가 아무것도 return하지 않으면 void임
따로 명시할 필요 없음

///---///
function hello(name: string | number) {
    if(typeof name === "string"){
        //여기서 name은 string
    } else if(type of name === "number"){
        //여기서 name은 number
    } else {
        //여기서 name은 never => 작동하지 않을 코드
    }
}
///---///
never 타입(거의 사용 안 할 것임)

///---///
type Add = (a: number, b: number) => number;

const add: Add = (a, b) => a + b;
///---///
call signature? 함수를 어떻게 호출해야하는지 알려줌
함수의 인자 타입과 반환 타입을 알려줌

///---///
type Add = {
    (a: number, b: number) : number
    (a: number, b: string) : number
}
///---///
overloading?
함수가 여러개의 call signatures를 가지고 있을 때 발생
다른 사람들이 만든 외부 라이브러리를 사용하는데
이때 패키지나 라이브러리들은 오버로딩을 많이 사용함

///---///
type Add = {
    (a: number, b: number): number
    (a: number, b: number, c: number): number
}

const add: Add = (a, b, c?: numbner) => {
    if(c) return a + b + c;
    return a + b;
}
///---///
call signature의 파라미터 개수가 다를 때

///---///
type SuperPrint = {
    (arr: number[]): void
    (arr: boolean[]): void
    ...
}
const superPrint: SuperPrint = (arr) => {
    arr.forEach(i => console.log(i));
}
///---///
이렇게 만들면 하나하나 다 추가해줘야 해서 귀찮다
=> generic 사용(concrete type만 가능, 첫글자는 대문자)
///---///
type SuperPrint <T>(a: T[]) => T;
const superPrint: SuperPrint = (arr) => arr[0];
///---///
generic을 사용하면 직접 타입을 명시하지 않아도 타입 스크립트가 유추해줌
any를 사용하지 말 것
라이브러리를 만들거나 다른 개발자가 사용할 기능을 개발하는 경우엔 제네릭이 유용하지만
그 외 대부분의 경우에는 직접 작성할 일은 없을 것임
///---///
type Player<E> = {
    name: string
    extraInfo: E
}
const nico: Player<{favFood: string}> = {
    name: "nico",
    extraInfo: {
        favFood: "kimchi"
    }
}

function printNumbers(arr: Array<numnber>){}
function printNumbers(arr: number[]){}//같은 표현
///---///

///---///
abstract class User {//추상 클래스
    constructor(
        private firstName: string,
        private lastName: string,
        private nickname: string
    ) {}
    abstract getNickName(): void;
    getFullName(){
        return `${this.firstName} ${this.lastName}`;
    }
}

class Player extends User{
    getNickName(){

    }
}

const nico = new Player("nico", "las", "nic");
///---///
js로 변환 시 private, public, protected은 없어짐
추상클래스? 다른 클래스가 상속받을 수 있는 클래스
하지만 직접 새로운 인스턴스를 만들 수는 없다(new User X)
추상클래스에서 메소드를 구현하면 안 되고 대신 call signature를 적어야 함
추상 메소드? 추상 클래스를 상속받는 모든 것들이 구현해야하는 메소드

private 필드들은 당연히 인스턴스 밖에서 접근할 수가 없고, 다른 자식 클래스에서도
접근할 수 없다 즉 외부로부터는 보호되지만 다른 곳에서 사용 불가
protected를 사용하면 자식 클래스에서 접근 가능

///---///
type Words = {
    [key: string]: string
}

class Dict {
    private words: Words
    constructor(){
        this.words = {}
    }
    add(word: Word){
        if(this.words[word.term] === undefined){
            this.words[word.term] = word.def;
        }
    }
    def(term: string){
        return this.words[term];
    }
}

class Word {
    constructor(
        public term: string,
        public def: string
    ){}
}

const kimchi = new Word("kimchi", "korean food");

const dict = new Dict();
dict.add(kimchi);
///---///
객체의 타입 또한 정의 가능
클래스를 타입처럼 사용 가능

///---///
type Team = "red" | "blue" | "yellow";

type Player = {
  nickname: string;
  team: Team;
};
///---///
특정 값으로만 타입을 지정 가능

///---///
interface Player {
  nickname: string;
  team: Team;
  health: Health;
}

type Player = {
  nickname: string;
  team: Team;
  health: Health; 
}
///---///
차이?
인터페이스는 오브젝트의 모양만을 특정해주기 위해서 사용
type은 오브젝트 및 키워드 지정 등 더 많은 곳으로 사용 가능

///---///
interface User {
    name: string
}

interface User{
    lastName: string
}

interface User {
    health: number
}
///---///
이렇게 작성하면 하나의 interface로 합쳐줌 근데 타입은 이게 안 됨

추상클래스를 사용하면 자바스크립트에서는 추상이 없어서 그냥 클래스로 변환됨
근데 인터페이스로 사용하면 자바스크립트로 변환 시 사라짐 => 파일 크기 줄어든다
그리고 extends 대신 implements로 사용
인터페이스를 상속하면 protected, private은 사용 불가
그리고 하나 이상의 인터페이스를 상속 가능
인터페이스 또한 타입으로 사용 가능
return type또한 인터페이스로 정할 수 있는데 이때 new User 이렇게 할 필요 없고
그냥 그 양식 맞춰서 반환하면 됨

제네릭은 다른 타입에게 물려줄 수 있다


.d.ts 파일은 call signature들의 선언 모음
타입스크립트가 이걸 보고 알려줌

JSDoc?
.js 파일에서 사용하는 주석으로 이루어진 문법
실행 중인 코드에는 전혀 영향 없지만
TS의 보호 기능을 활성화 할 수 있다
